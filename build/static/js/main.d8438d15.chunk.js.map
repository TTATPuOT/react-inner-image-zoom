{"version":3,"sources":["components/Nav.js","components/Main.js","components/Product.js","pages/Index.js","pages/Demos.js","pages/Docs.js","pages/Support.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","href","react_router_dom","to","activeClassName","Main","props","children","Product","Index","components_Product","Demos","Docs","Support","App","components_Nav","components_Main","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8438d15.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './nav.css';\n\nconst Nav = () => {\n  return(\n    <nav className=\"nav\">\n      <ul className=\"nav__list nav__list--secondary\">\n        <li className=\"nav__item\">\n          <a className=\"nav__link\" href=\"https://github.com/laurenashpole/react-inner-image-zoom\">Github</a>\n        </li>\n        <li className=\"nav__item\">\n          <a className=\"nav__link\" href=\"#\">NPM</a>\n        </li>\n      </ul>\n\n      <ul className=\"nav__list nav__list--primary\">\n        <li className=\"nav__item nav__item--left\">\n          <NavLink className=\"nav__link\" to=\"/\">+ Inner Image Zoom</NavLink>\n        </li>\n        <li className=\"nav__item\">\n          <NavLink to=\"/demos\" className=\"nav__link\" activeClassName=\"nav__link--active\">Demos</NavLink>\n        </li>\n        <li className=\"nav__item\">\n          <NavLink to=\"/docs\" className=\"nav__link\" activeClassName=\"nav__link--active\">Docs</NavLink>\n        </li>\n        <li className=\"nav__item\">\n          <NavLink to=\"/support\" className=\"nav__link\" activeClassName=\"nav__link--active\">Support</NavLink>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Nav;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './main.css';\n\nconst Main = (props) => {\n  return(\n    <main className=\"main\">\n      {props.children}\n    </main>\n  );\n};\n\nMain.propTypes = {\n  children: PropTypes.element\n};\n\nexport default Main;","import React from 'react';\nimport './product.css';\n\nconst Product = () => {\n  return(\n    <section className=\"product\">\n      <div className=\"product__img\">\n\n      </div>\n\n      <div className=\"product__details\">\n        <h2>React Inner Image Zoom Component</h2>\n        <p>Great for e-commerce product images!</p>\n        <p className=\"product__price\">$0</p>\n        <a className=\"product__btn\" href=\"https://github.com/laurenashpole/react-inner-image-zoom\">View on Github</a>\n        <ul className=\"product__list\">\n          <li>Details</li>\n          <li>Zoom + pan on hover and zoom + drag on touch.</li>\n          <li>Can be used with other popular React components.</li>\n          <li>Demo image from Unsplash.</li>\n        </ul>\n      </div>\n    </section>\n  );\n};\n\nexport default Product;","import React from 'react';\nimport Product from '../components/Product';\n\nconst Index = () => {\n  return(\n    <div>\n      <Product />\n    </div>\n  );\n};\n\nexport default Index;","import React from 'react';\n\nconst Demos = () => {\n  return(\n    <div>Demos</div>\n  );\n};\n\nexport default Demos;","import React from 'react';\n\nconst Docs = () => {\n  return(\n    <div>Docs</div>\n  );\n};\n\nexport default Docs;","import React from 'react';\n\nconst Support = () => {\n  return(\n    <div>Support</div>\n  );\n};\n\nexport default Support;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Nav from './components/Nav';\nimport Main from './components/Main';\nimport Index from './pages/Index';\nimport Demos from './pages/Demos';\nimport Docs from './pages/Docs';\nimport Support from './pages/Support';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n\n      <Main>\n        <Switch>\n          <Route exact path=\"/\" component={Index} />\n          <Route path=\"/demos\" component={Demos} />\n          <Route path=\"/docs\" component={Docs} />\n          <Route path=\"/support\" component={Support} />\n        </Switch>\n      </Main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}